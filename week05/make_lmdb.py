# -*- coding: utf-8 -*-
"""make_lmdb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HfroOP-6wiE60_8v4AruohZZmFp2Jzcm
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Colab\ Notebooks/Lane_segmentation/Week05

import lmdb
import numpy as np
import os
import cv2
from google.colab.patches import cv2_imshow

"""### 将数据保存为LMDB数据存储格式"""

root_path = './'
image_csv = './data_list/train.csv'
image_output = './LMDB_data/train'
label_csv = './data_list/val.csv'
label_output = './LMDB_data/val'

# 图片读取检查函数，遇到不合法图片直接告知位置
def checkImage(image_bn):
    if image_bn is None: return False
    image_buff = np.frombuffer(image_bn, dtype=np.uint8)
    image = cv2.imdecode(image_buff, cv2.IMREAD_GRAYSCALE)
    if image is None: return False
    h, w = image.shape
    if not h or not w:
        return False
    return True

def MakeLMDB(data_path, output_path, check=False):
    total = 0
    cache = {}
    with open(data_path, 'r') as f:
        lines = f.readlines()
        total = len(lines)
        for i, line in enumerate(lines):
            image_path, label_path = line.strip().split(', ')
            image_path = os.path.join(root_path, image_path)
            label_path = os.path.join(root_path, label_path)
            image_name = 'image_%03d'%(i)
            label_name = 'label_%03d'%(i)
            # 读取图片的二进制形式并组成键值对
            with open(image_path, 'rb') as fi:
                image_bn = fi.read()
                if check:
                    assert checkImage(image_bn), f'请查看图片是否存在：{image_path}'
                cache[image_name] = image_bn
            with open(label_path, 'rb') as fl:
                label_bn = fl.read()
                if check:
                    assert checkImage(label_bn), f'请查看图片是否存在：{label_path}'
                cache[label_name] = label_bn
    assert len(cache) == total * 2, '数据有问题！'

    # 将cache写入LMDB
    env = lmdb.open(output_path, map_size=2 * 1024**3) # 最大2GB
    with env.begin(write=True) as txn:
        for k, v in cache.items():    
            txn.put(k.encode(), v)

    env.close()

# 测试
if __name__ == '__main__':
    MakeLMDB(image_csv, image_output, check=True)
    MakeLMDB(label_csv, label_output, check=True)